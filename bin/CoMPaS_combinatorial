#!/bin/python

########################################################################
#                                                                      #
# DISCLAIMER: This script encapsulates the project KITCAT and          #
#             generates the histograms to calculate 2-point            #
#             correlation function for the provided catalog.           #
#             User can use KITCAT as well.                             #
#                                                                      #
########################################################################

import sys

import os

import argparse

import configparser

import numpy

def run(num_jobs, prefix, config, tempdir):

    slurm_config = configparser.RawConfigParser()
    slurm_config.read(config)
    
    user     = slurm_config.get('config', 'user')
    partition= slurm_config.get('config', 'partition')
    walltime = slurm_config.get('config', 'walltime')
    mem      = slurm_config.get('config', 'memory')
    envcmd   = slurm_config.get('config', 'environment_command')
    # there will be try statements here
    try:
        jobname  = slurm_config.get('config', 'jobname')
    except configparser.NoOptionError:
        jobname  = "{}_job".format(prefix)
    try:
        logfile  = slurm_config.get('config', 'logfile')
    except configparser.NoOptionError:
        logfile  = "{}_log".format(prefix)
    try:
        errfile  = slurm_config.get('config', 'errorfile')
    except configparser.NoOptionError:
        errfile  = "{}_err".format(prefix)

    sbatch_cmd = "#!/bin/bash \n" + \
        "\n" + \
        "#SBATCH --export=ALL \n" + \
        "#SBATCH --mem={} \n".format(mem) + \
        "#SBATCH --time={} \n".format(walltime) + \
        "#SBATCH --job-name={} \n".format(jobname) + \
        "#SBATCH --error={} \n".format(errfile) + \
        "#SBATCH --output={} \n".format(logfile) + \
        "#SBATCH --partition={} \n".format(partition) + \
        "#SBATCH --array=0-{} \n".format(num_jobs-1) + \
        "\n"
    exec_cmd = "{} \n".format(envcmd) + \
        "srun KITCAT_combinatorial -p {} ".format(prefix) + \
        "-i ${SLURM_ARRAY_TASK_ID} " + \
        "-n {} ".format(num_jobs) + \
        "-p {}".format(prefix)

    if tempdir == None:
        tempdir = '/scratch/{}/scripts'.format(user)

    filename = "{}/{}.sh".format(tempdir, jobname)
    fid = open(filename, "w")
    fid.write("{}{}".format(sbatch_cmd, exec_cmd))
    fid.close()

    print("$(sbatch --parsable {})".format(filename))
    return #os.system("$(sbatch --parsable {})".format(filename))

if __name__ == "__main__":

    parser = argparse.ArgumentParser(description=r'Script to run the combinatorial stage of KITCAT for 2-point correlation function calculations. ' \
                                     'DISCLAIMER: This script encapsulates the project KITCAT and prepares the catalogs. User can use KITCAT as well.')
    parser.add_argument('-p', '--prefix', required=True, type=str, help='prefix to be used to read the preprocessed file and also to generate the output')
    parser.add_argument('-n', '--number_of_jobs', required=True, type=int, help='number of jobs to be submitted to slurm')
    parser.add_argument('-c', '--config', required=True, type=str, help='configuration file for the slurm jobs.')
    parser.add_argument('-t', '--temp_directory', required=False, type=str, default=None, help='temporary directory name that will be used to place the' \
                        'batch scripts')
    parsed_args = parser.parse_args()
    prefix      = parsed_args.prefix
    num_jobs    = parsed_args.number_of_jobs
    config      = parsed_args.config
    tempdir     = parsed_args.temp_directory

    jobid = run(num_jobs, prefix, config, tempdir)
